pipeline {
    agent { label 'Jenkins-Agent' }

    tools {
        jdk "Java17"
        maven "Maven3"
    }

    environment {
        APP_NAME = "register-app-pipeline"
        RELEASE = "1.0.0"
        DOCKER_USER = "prakanda123"
        DOCKER_PASS = 'dockerhub'
        IMAGE_NAME = "${DOCKER_USER}/${APP_NAME}"
        IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}"
        JENKINS_API_TOKEN = credentials("JENKINS_API_TOKEN")
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout from SCM') {
            steps {
                git branch: 'main', credentialsId: 'github', url: 'https://github.com/Hatsuhinode/DevOps-01.git'
            }
        }

        stage('Build Application') {
            steps {
                // Navigate to the Application directory
                dir('./Application') {
                    // Run Maven commands
                    sh 'mvn clean package'
                }
            }
        }

        stage('Test Application') {
            steps {
                // Navigate to the Application directory
                dir('./Application') {
                    // Run Maven commands
                    sh 'mvn test'
                }
            }
        }

        stage("SonarQube Analysis") {
            steps {
                script {
                    dir('./Application') {
                        withSonarQubeEnv(credentialsId: 'jenkins-sonarqube-token') {
                            sh "mvn sonar:sonar"
                        }
                    }
                }
            }
        }

        stage("Quality Gate") {
            steps {
                script {
                    dir('./Application') {
                        waitForQualityGate abortPipeline: false, credentialsId: 'jenkins-sonarqube-token'
                    }
                }
            }
        }

        stage("Build & Push Docker Image") {
            steps {
                script {
                    dir('./Application') {
                        docker.withRegistry('', DOCKER_PASS) {
                            docker_image = docker.build "${IMAGE_NAME}"
                        }

                        docker.withRegistry('', DOCKER_PASS) {
                            docker_image.push("${IMAGE_TAG}")
                            docker_image.push('latest')
                        }
                    }
                }
            }
        }

        stage("Trivy Scan") {
            steps {
                script {
                    sh "docker run -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image ${IMAGE_NAME}:latest --no-progress --scanners vuln --exit-code 0 --severity HIGH,CRITICAL --format table"
                }
            }
        }

        stage('Cleanup Artifacts') {
            steps {
                script {
                    sh "docker rmi ${IMAGE_NAME}:${IMAGE_TAG}"
                    sh "docker rmi ${IMAGE_NAME}:latest"
                }
            }
        }
    }

    post {
        always {
            // Publish JUnit test results
            junit '**/target/surefire-reports/*.xml'
        }
    }
}


// NOTE
// Jenkinsfile defines steps and stages using relative paths or commands based on the workspace directory. 
// This means that any references to files or directories within the Jenkinsfile are relative to the workspace directory.

